local func = require "ste/func"
local coor = require "ste/coor"
local line = require "ste/coorline"
local quat = require "ste/quaternion"
local pipe = require "ste/pipe"
local ste = require "ste"

local dump = require "luadump"

local math = math
local pi = math.pi
local abs = math.abs
local table = table
local unpack = table.unpack
local insert = table.insert

local infi = 1e8
local lengthList = func.seq(40, 400)
local slopeList = {2.5, 5, 7.5, 10, 12.5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100}
local degList = func.seqMap({1, 1800}, function(d) return d / 10 end)
local allDegList = pipe.new * degList * pipe.map(pipe.neg()) * pipe.rev() / 0 + degList

local rList = {15, 12, 10, 8, 7.5, 6, 5, 4, 3.5, 3, 2.5, 2, 1.75, 1.5, 1.25, 1, 0.9, 0.85, 0.8, 0.75, 0.7, 0.666, 0.633, 0.6, 0.566, 0.533, 0.5, 0.475, 0.45, 0.425, 0.4, 0.375, 0.35, 0.325, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05}
local rList = pipe.new * rList * pipe.map(pipe.neg()) * pipe.rev() / infi + rList
local trackNumberList = {1, 2, 3, 4, 5, 6, 7, 8, 10}
local portailHeightList = func.seqMap({0, 30}, function(h) return h * 0.5 end)


local trackTypeList = {
    "ste/tracks/std.module",
    "ste/tracks/std_catenary.module",
    "ste/tracks/hs.module",
    "ste/tracks/hs_catenary.module"
}

local streetTypeList = {
    "town_small_new",
    "town_medium_new",
    "town_large_new",
    "town_small_old",
    "town_medium_old",
    "town_large_old",
    "town_x_large_new",
    "country_small_new",
    "country_medium_new",
    "country_large_new",
    "country_x_large_new",
    "country_small_old",
    "country_medium_old",
    "country_large_old"
}


local function params()
    return {
        {
            key = "degS",
            name = _("MENU_DEG_SURFACE"),
            values = allDegList * pipe.map(tostring),
            uiType = "SLIDER",
            defaultIndex = (#allDegList - 1) / 2
        },
        {
            key = "degU",
            name = _("MENU_DEG_UNDERGROUND"),
            values = allDegList * pipe.map(tostring),
            uiType = "SLIDER",
            defaultIndex = (#allDegList - 1) / 2
        },
        {
            key = "halfLength",
            name = _("MENU_LENGTH"),
            values = func.map(lengthList, tostring),
            uiType = "SLIDER",
            defaultIndex = 110
        },
        {
            key = "portailHeight",
            name = _("MENU_PORTAIL_HEIGHT"),
            values = func.map(portailHeightList, tostring),
            uiType = "SLIDER",
            defaultIndex = 0
        },
        {
            key = "wallType",
            name = _("MENU_WALL_STYLE"),
            values = {
                "ui/ste/concrete.tga",
                "ui/ste/brick.tga",
                "ui/ste/brick_2.tga"
            },
            uiType = "ICON_BUTTON",
            defaultIndex = 0
        },
    }

end

local function defaultParams(param)
    local function limiter(d, u)
        return function(v) return v and v < u and v or d end
    end
    
    func.forEach(params(), function(i)param[i.key] = limiter(i.defaultIndex or 0, #i.values)(param[i.key]) end)
end

local offsetGen = function(meta)
    local function gen(result, base, fst, snd, ...)
        if (fst and snd) then
            local pos = snd.pos
            local offset = base + (fst.width + snd.width) * 0.5
            
            return gen(result + {{pos, offset}}, offset, snd, ...)
        else
            return result
        end
    end
    return gen(pipe.new * {}, 0, {width = 0}, unpack(meta))
end

local fzGen = function(initHeight, finalHeight)
    return function(initRad, finalRad)
        local ln = line.byPtPt(
            coor.xy(initRad, initHeight),
            coor.xy(finalRad, finalHeight)
        )
        return function(rad) return (ln - line.byVecPt(coor.xy(0, 1), coor.xy(rad, 0))).y end
    end
end

local fsGen = function(slope)
    return function(initRad, finalRad) return function(_) return slope end end
end

local config = function(params)
    local height = 8.5
    local portail = portailHeightList[params.portailHeight + 1]
    
    local length = lengthList[params.halfLength + 1]
    local trackSlope = (height - portail) / length
    local wallSlope = portail / length
    
    local rad = {
        surface = allDegList[params.degS + 1] / 180 * math.pi,
        underground = allDegList[params.degU + 1] / 180 * math.pi
    }

    local radius = {
        surface = rad.surface == 0 and infi or (length / rad.surface),
        underground = rad.underground == 0 and infi or (length / rad.underground)
    }
    
    local modules = {}
    
    local allPos = {}
    local posMark = {}
    for slotId, m in pairs(params.modules) do
        local info = ste.slotInfo(slotId)
        if not func.contains(allPos, info.pos.x) then
            insert(allPos, info.pos.x)
            posMark[info.pos.x] = {
                surface = false,
                underground = false
            }
        end
        if (info.typeId == 8) then
            posMark[info.pos.x].surface = info.pos
        elseif (info.typeId == 9) then
            posMark[info.pos.x].underground = info.pos
        elseif (info.typeId == 7) then
            posMark[info.pos.x].beam = info.pos
        elseif (info.typeId < 5) then
            modules[info.pos.x] = func.with(
                m.metadata,
                {
                    typeId = ste.slotInfo(slotId).typeId,
                    pos = info.pos.x
                }
        )
        end
    end
    
    local fz = {
        surface = fzGen(-height + portail, 0),
        underground = fzGen(-height + portail, (-height + portail) * 2),
        wall = fzGen(portail, 0),
    }
    
    local fs = {
        surface = fsGen(trackSlope),
        underground = fsGen(-trackSlope),
        wall = fsGen(-wallSlope),
    }
    
    local arcPackers = {
        surface = ste.arcPacker(length, radius.surface, fz.surface, fs.surface),
        underground = ste.arcPacker(-length, radius.underground, fz.underground, fs.underground),
        wall = ste.arcPacker(length, radius.surface, fz.wall, fs.wall),
    }
    
    table.sort(allPos)
    local posMin = func.min(allPos)
    local posMax = func.max(allPos)
    
    local offsets = pipe.new
        * func.seq(posMin > 50 and 49 or (posMin - 1), posMax + 1)
        * pipe.map(function(pos)
            return modules[pos] or {pos = pos, width = 5}
        end)
        * offsetGen
    
    local reOffset =
        posMin > 50 and func.min(offsets, function(l, r) return l[2] < r[2] end)[2]
        or (offsets * pipe.filter(function(o) return o[1] <= 50 end) * pipe.max(function(l, r) return l[2] < r[2] end))[2]
    offsets = offsets * pipe.map(function(o) return {o[1], o[2] - reOffset} end)
    
    local coords = {}
    local arcs = {}
    
    for i, offset in ipairs(offsets) do
        local pos, offset = unpack(offset)
        if func.contains(allPos, pos) then
            local typeId = modules[pos].typeId
            if (typeId > 3) then
                arcs[pos] = {wall = arcPackers.wall(offset), surface = arcPackers.surface(offset)}
                coords[pos] = {offset = offset}
            else
                arcs[pos] = {
                    surface = arcPackers.surface(offset),
                    underground = arcPackers.underground(offset),
                    top = arcPackers.wall(offset)
                }
                coords[pos] = {offset = offset}
            end
        else
            arcs[pos] = {
                surface = arcPackers.surface(offset),
                underground = arcPackers.underground(offset),
                wall = arcPackers.wall(offset),
                top = arcPackers.wall(offset)
            }
            coords[pos] = {offset = offset}
        end
    end
    
    for pos, refArc in pairs(arcs) do
        if (refArc.surface) then
            local biLatCoords, nSeg, segLength = ste.biLatCoords(5, refArc.surface)
            coords[pos].surface = {biLatCoords = biLatCoords, nSeg = nSeg, segLength = segLength, coords = ste.interlace(biLatCoords(0))}
        end
        
        if (refArc.wall) then
            local biLatCoords, nSeg, segLength = ste.biLatCoords(5, refArc.wall)
            coords[pos].wall = {biLatCoords = biLatCoords, nSeg = nSeg, segLength = segLength, coords = ste.interlace(biLatCoords(0))}
        end
        
        if (refArc.top) then
            local biLatCoords, nSeg, segLength = ste.biLatCoords(5, refArc.top)
            coords[pos].top = {biLatCoords = biLatCoords, nSeg = nSeg, segLength = segLength, coords = ste.interlace(biLatCoords(0))}
        end
        
        if (refArc.underground) then
            local biLatCoords, nSeg, segLength = ste.biLatCoords(5, refArc.underground)
            coords[pos].underground = {biLatCoords = biLatCoords, nSeg = nSeg, segLength = segLength, coords = ste.interlace(biLatCoords(0))}
        end
    end
    
    return {
        arcs = arcs,
        coords = coords,
        allPos = allPos,
        offsets = offsets,
        posMin = posMin,
        posMax = posMax,
        modules = modules,
        posMark = posMark
    }
end

local createTemplateFn = function(params)
    local fn = {
        function()
            local trackNb = trackNumberList[params.trackNb + 1]
            local trackType = trackTypeList[(params.catenary) + (params.highspeed) * 2 + 1]
            local length = lengthList[params.halfLength + 1]

            local minPos = 50 - (trackNb % 2 == 1 and (trackNb - 1) / 2 or trackNb / 2)
            local maxPos = minPos + trackNb - 1
            
            local result = {}
            
            for p = minPos, maxPos do
                result[ste.slotId(coor.xyz(p, 0, 0), 1)] = trackType
                result[ste.slotId(coor.xyz(p, 0, 0), 2)] = trackType
                
                if (params.adjustS < 99) then
                    local adjustPosY = math.ceil(((params.adjustS + 1) * 0.01 * length) / 5)
                    if adjustPosY < 3 then adjustPosY = 3 end
                    result[ste.slotId(coor.xyz(p, adjustPosY < 3 and 3 or adjustPosY, 0), 8)] = "ste/ste_pos_marker.module"
                end

                if (params.adjustU < 99) then
                    local adjustPosY = math.ceil(((params.adjustU + 1) * 0.01 * length) / 5)
                    if adjustPosY < 3 then adjustPosY = 3 end
                    result[ste.slotId(coor.xyz(p, adjustPosY < 3 and 3 or adjustPosY, 0), 9)] = "ste/ste_pos_marker.module"
                end

            end
            
            result[ste.slotId(coor.xyz(minPos - 1, 0, 0), 4)] = "ste/ste_wall.module"
            result[ste.slotId(coor.xyz(maxPos + 1, 0, 0), 4)] = "ste/ste_wall.module"
            
            if params.leftTrack == 1 then
                result[ste.slotId(coor.xyz(minPos - 2, 0, 0), 3)] = trackType
            end
            
            if params.rightTrack == 1 then
                result[ste.slotId(coor.xyz(maxPos + 2, 0, 0), 3)] = trackType
            end
            
            return result
        end,
        function()
            local streetType = "ste/streets/" .. streetTypeList[params.streetType + 1] .. ".module"
            local length = lengthList[params.halfLength + 1]
            local result = {}
            
            result[ste.slotId(coor.xyz(50, 0, 0), 1)] = streetType
            result[ste.slotId(coor.xyz(50, 0, 0), 2)] = streetType
            
            if (params.adjustS < 99) then
                local adjustPosY = math.ceil(((params.adjustS + 1) * 0.01 * length) / 5)
                if adjustPosY < 3 then adjustPosY = 3 end
                result[ste.slotId(coor.xyz(50, adjustPosY < 3 and 3 or adjustPosY, 0), 8)] = "ste/ste_pos_marker.module"
            end

            if (params.adjustU < 99) then
                local adjustPosY = math.ceil(((params.adjustU + 1) * 0.01 * length) / 5)
                if adjustPosY < 3 then adjustPosY = 3 end
                result[ste.slotId(coor.xyz(50, adjustPosY < 3 and 3 or adjustPosY, 0), 9)] = "ste/ste_pos_marker.module"
            end

            result[ste.slotId(coor.xyz(49, 0, 0), 4)] = "ste/ste_wall.module"
            result[ste.slotId(coor.xyz(51, 0, 0), 4)] = "ste/ste_wall.module"
            
            return result
        end
    }
    return fn[params.templateIndex + 1]()
end

local preProcessFn = function(modules, change)
    if change.added then
        local info = ste.slotInfo(change.slotId)
        if (info.typeId > 6) then
            local slotId = ste.slotId(info.pos, info.typeId)
            for _, k in ipairs(func.keys(modules)) do
                local sinfo = ste.slotInfo(k)
                if (sinfo.typeId == info.typeId and sinfo.pos.x == info.pos.x) then
                    modules[k] = nil
                elseif (sinfo.pos.z > 0) then -- Move old markers to new id
                    modules[ste.slotId(sinfo.pos, info.typeId)] = modules[k]
                    modules[k] = nil
                end
            end
            modules[slotId] = change.module
        else
            modules[change.slotId] = change.module
        end
    else
        modules[change.slotId] = nil
    end
    return modules
end

local upgradeFn = function(params)
    local modules = {}
    local slotId = params.slotId
    if params.modules[slotId] then
        local function SwapModule(from, to, ...)
            if (from and to) then
                if params.modules[slotId].name == from then
                    table.insert(modules, {slotId, to})
                elseif params.modules[slotId].name == to then
                    table.insert(modules, {slotId, from})
                else
                    SwapModule(...)
                end
            end
        end
        
        if (params.catenaryToggle == 1) then
            SwapModule(
                "ste/tracks/hs.module",
                "ste/tracks/hs_catenary.module",
                "ste/tracks/std.module",
                "ste/tracks/std_catenary.module"
        )
        elseif (params.trackTypeToggle == 1) then
            SwapModule(
                "ste/tracks/std.module",
                "ste/tracks/hs.module",
                "ste/tracks/std_catenary.module",
                "ste/tracks/hs_catenary.module"
        )
        end
    end
    return modules
end


local updateFn = function(params)
    if #func.keys(params.modules) == 0 then
        return {
            edgeLists = {},
            models = {{
                id = "asset/icon/marker_exclamation.mdl",
                transf = coor.I(),
            }},
            terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
        }
    end

    defaultParams(params)
    local config = config(params)
    
    local result = {
        edgeLists = {},
        models = pipe.new * {},
        terrainAlignmentLists = {},
        groundFaces = {},
        slots = {},
        config = config,
        dependentSlots = {},
        colliders = {}
    }
    
    local addSlot = function(typeId, pos, coords, dep)
        local spacing = typeId == 4 and coor.xy(0.25, 2.5) or coor.xy(2.5, 2.5)
        local type = typeId == 4 and "ste_wall" or typeId == 5 and "ste_beam" or typeId == 6 and "ste_freenode" or "ste_track"
        local coord = (coords[1].s:avg(coords[1].i)) .. (typeId == 6 and coor.transZ(1) or coor.I())
        local id = ste.slotId(coor.xyz(pos, 0, 0), typeId)
        insert(result.slots, {
            id = id,
            transf = coor.trans(coord),
            type = type,
            spacing = {spacing.x, spacing.x, spacing.y, spacing.y}
        })
        
        if dep then 
            if not result.dependentSlots[dep] then result.dependentSlots[dep] = {} end 
            table.insert(result.dependentSlots[dep], id)
        end
        return coords, id
    end

    local addMarker = function(typeId,  pos, coords, nSeg, dep)
        local posMark = typeId == 2 and config.posMark[pos].underground or config.posMark[pos].surface
        local spacing = typeId == 4 and coor.xy(0.2, 2) or coor.xy(2, 2)
        local typeMark = {8, 9, 8, 8, 7}
        if not posMark then posMark = coor.xyz(pos, nSeg, 0) end
        for i, coord in ipairs(coords) do
            if i > 2 then
                local vec = (coord.s - coord.i):withZ(0)
                local coord = coord.s:avg(coord.i)
                local id = ste.slotId(i == posMark.y and posMark or coor.xyz(pos, i, 0), typeMark[typeId])
                if dep then 
                    if not result.dependentSlots[dep] then result.dependentSlots[dep] = {} end 
                    table.insert(result.dependentSlots[dep], id)
                end
                insert(result.slots, {
                    id = id,
                    transf = quat.byVec(coor.xyz(i < posMark.y and -1 or 1, 0, 0), (vec)):mRot() * coor.trans(coord),
                    type = "ste_marker",
                    spacing = {spacing.y, spacing.y, spacing.x, spacing.x},
                    shape = 1
                })
            end
        end
    end
    
    local emptyPos = func.seq(config.posMin, config.posMax)

    for slotId, m in pairs(params.modules) do
        local info = ste.slotInfo(slotId)
        local pos = info.pos.x
        emptyPos = func.filter(emptyPos, function(p) return p ~= pos end)
        if (info.typeId == 1) then
            if not params.modules[ste.slotId(info.pos, 6)] then
                local coords, sId = addSlot(info.typeId, pos, config.coords[pos].surface.coords)
                addMarker(info.typeId, pos, coords, config.coords[pos].surface.nSeg, sId)
                addSlot(6, pos, coords, sId)
                if not params.modules[ste.slotId(info.pos, 5)] then
                    addSlot(5, pos, config.coords[pos].top.coords)
                end

                if not params.modules[ste.slotId(info.pos, 2)] then
                    addSlot(2, pos, config.coords[pos].underground.coords)
                end
            end
        elseif (info.typeId == 2) then
            if not params.modules[ste.slotId(info.pos, 6)] then
                local coords, sId = addSlot(info.typeId, pos, config.coords[pos].underground.coords)
                addMarker(info.typeId, pos, coords, config.coords[pos].underground.nSeg, sId)
                if not params.modules[ste.slotId(info.pos, 1)] then
                    addSlot(1, pos, config.coords[pos].surface.coords)
                end
            end
        elseif (info.typeId == 3) then
            if not params.modules[ste.slotId(info.pos, 6)] then
                local coords, sId = addSlot(info.typeId, pos, config.coords[pos].top.coords)
                addSlot(6, pos, coords, sId)
                addMarker(info.typeId, pos, coords, config.coords[pos].top.nSeg, sId)
            end
        elseif (info.typeId == 4) then
            local coords, sId = addSlot(info.typeId, pos, config.coords[pos].wall.coords)
            addMarker(info.typeId, pos, coords, config.coords[pos].wall.nSeg, sId)
        elseif (info.typeId == 5) then
            local coords, sId = addSlot(5, pos, config.coords[pos].top.coords)
            addMarker(5, pos, coords, config.coords[pos].top.nSeg, sId)
        end
    end

    for _, pos in ipairs(emptyPos) do
        local posL = func.max(func.filter(
            config.allPos, function(p) return p < pos end))
        local posR = func.min(func.filter(
            config.allPos, function(p) return p > pos end))

        local typeIdL = config.modules[posL].typeId
        local typeIdR = config.modules[posR].typeId

        if (typeIdL == 4 and typeIdR == 4) then
            addSlot(3, pos, config.coords[pos].top.coords)
            addSlot(1, pos, config.coords[pos].surface.coords)
        elseif (typeIdL == 4 and typeIdR == 3) then
            addSlot(3, pos, config.coords[pos].top.coords)
        elseif (typeIdL == 3 and typeIdR == 4) then
            addSlot(3, pos, config.coords[pos].top.coords)
        elseif (typeIdL == 4 and typeIdR < 3) then
            addSlot(1, pos, config.coords[pos].surface.coords)
        elseif (typeIdL == 3 and typeIdR == 3) then
            addSlot(3, pos, config.coords[pos].top.coords)
            addSlot(4, pos, config.coords[pos].wall.coords)
        elseif (typeIdL == 3 and typeIdR < 3) then
            addSlot(4, pos, config.coords[pos].wall.coords)
        elseif (typeIdL < 3 and typeIdR == 4) then
            addSlot(1, pos, config.coords[pos].surface.coords)
        elseif (typeIdL < 3 and typeIdR == 3) then
            addSlot(4, pos, config.coords[pos].wall.coords)
        elseif (typeIdL < 3 and typeIdR < 3) then
            addSlot(1, pos, config.coords[pos].surface.coords)
        end
    end
    
    if (config.modules[config.posMin]) then
        local pos = config.posMin - 1
        local typeId = config.modules[config.posMin].typeId
        
        if (typeId == 4) then
            addSlot(3, pos, config.coords[pos].top.coords)
            addSlot(1, pos, config.coords[pos].surface.coords)
        elseif (typeId == 3) then
            addSlot(4, pos, config.coords[pos].wall.coords)
            addSlot(3, pos, config.coords[pos].top.coords)
        else
            addSlot(4, pos, config.coords[pos].wall.coords)
            addSlot(1, pos, config.coords[pos].surface.coords)
        end
    end
    
    if (config.modules[config.posMax]) then
        local pos = config.posMax + 1
        local typeId = config.modules[config.posMax].typeId
        
        if (typeId == 4) then
            addSlot(3, pos, config.coords[pos].top.coords)
            addSlot(1, pos, config.coords[pos].surface.coords)
        elseif (typeId == 3) then
            addSlot(4, pos, config.coords[pos].wall.coords)
            addSlot(3, pos, config.coords[pos].top.coords)
        else
            addSlot(4, pos, config.coords[pos].wall.coords)
            addSlot(1, pos, config.coords[pos].surface.coords)
        end
    end

    dump()(result.slots)
    -- result.slotConfig = {
    --     ste_track = {
    --         maxModules = -1,
    --         message = "",
    --         skipCollisionCheck = true,
    --     },
    --     ste_wall = {
    --         maxModules = -1,
    --         message = "",
    --         skipCollisionCheck = true,
    --     }
    -- }
    
    result.terminateConstructionHook = function()
        local terrainEql = {}
        local terrainGrt = {}
        for _, coords in pairs(result.config.coords) do
            if (coords.surface and coords.surface.top) then
                insert(terrainEql, func.map(func.concat(coords.surface.top.lc, func.rev(coords.surface.top.rc)), coor.vec2Tuple))
            end
            if (coords.underground and coords.underground.top) then
                insert(terrainGrt, func.map(func.concat(func.rev(coords.underground.top.lc), coords.underground.top.rc), coor.vec2Tuple))
            end
        end
        
        insert(result.terrainAlignmentLists, {type = "EQUAL", faces = terrainEql})
        insert(result.terrainAlignmentLists, {type = "GREATER", faces = terrainGrt})
    end
    
    -- result.callInvalidModules = true
    
    return result
end

function data()
    local constructionTemplates =
        {
            {
                constructionType = "RAIL_STATION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 1863,
                    yearTo = 0
                },
                description = {
                    name = _("MENU_NAME"),
                    description = _("MENU_DESC"),
                    icon = "ui/ste/ste.tga"
                },
                data = {
                    params = {
                        {
                            key = "trackNb",
                            name = _("MENU_TRACK_NR"),
                            values = func.map(trackNumberList, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 1
                        },
                        {
                            key = "catenary",
                            name = _("MENU_TRACK_CAT"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 1
                        },
                        {
                            key = "highspeed",
                            name = _("MENU_TRACK_HS"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 1
                        },
                        {
                            key = "leftTrack",
                            name = _("MENU_LEFT_TRACK"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 0
                        },
                        {
                            key = "rightTrack",
                            name = _("MENU_RIGHT_TRACK"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                            defaultIndex = 0
                        },
                        {
                            key ="adjustS",
                            name = _("MENU_ADJUST_LENGTH_SURFACE"),
                            values = func.seqMap({1, 100}, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 99
                        },
                        {
                            key ="adjustU",
                            name = _("MENU_ADJUST_LENGTH_UNDERGROUND"),
                            values = func.seqMap({1, 100}, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 99
                        }
                    }
                },
            },
            {
                constructionType = "STREET_CONSTRUCTION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 1850,
                    yearTo = 0
                },
                description = {
                    name = _("MENU_NAME"),
                    description = _("MENU_DESC"),
                    icon = "ui/ste/ste_street.tga"
                },
                data = {
                    params = {
                        {
                            key = "streetType",
                            name = _("MENU_STREET_TYPE"),
                            values = func.map(streetTypeList, function(s) return "ui/streets/standard/" .. s .. ".tga" end),
                            uiType = "ICON_BUTTON",
                            defaultIndex = 0
                        },
                        {
                            key ="adjustS",
                            name = _("MENU_ADJUST_LENGTH_SURFACE"),
                            values = func.seqMap({1, 100}, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 99
                        },
                        {
                            key ="adjustU",
                            name = _("MENU_ADJUST_LENGTH_UNDERGROUND"),
                            values = func.seqMap({1, 100}, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 99
                        }
                    }
                },
            }
        }
    
    return {
        type = "ASSET_DEFAULT",
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_DESC")
        },
        categories = { "track_construction" },
        availability = {
            yearFrom = 0
        },
        order = 2000,
        -- buildMode = "MULTI",
        -- order = 27229,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        -- skipCollision = true,
        -- austemovable = false,
        params = params(),
        upgradeFn = upgradeFn,
        updateFn = updateFn,
        preProcessFn = preProcessFn
    }

end
